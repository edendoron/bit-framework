// BINA-BIT Protocol Buffers Declaration File

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: bit.proto

package bit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

///////////////////////////////////////////////////////////////////////////////
//  Enums
///////////////////////////////////////////////////////////////////////////////
type ESeverity int32

const (
	ESeverity_MINOR    ESeverity = 0
	ESeverity_DEGRADED ESeverity = 1
	ESeverity_CRITICAL ESeverity = 2
	ESeverity_SAFETY   ESeverity = 3
)

// Enum value maps for ESeverity.
var (
	ESeverity_name = map[int32]string{
		0: "MINOR",
		1: "DEGRADED",
		2: "CRITICAL",
		3: "SAFETY",
	}
	ESeverity_value = map[string]int32{
		"MINOR":    0,
		"DEGRADED": 1,
		"CRITICAL": 2,
		"SAFETY":   3,
	}
)

func (x ESeverity) Enum() *ESeverity {
	p := new(ESeverity)
	*p = x
	return p
}

func (x ESeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_bit_proto_enumTypes[0].Descriptor()
}

func (ESeverity) Type() protoreflect.EnumType {
	return &file_bit_proto_enumTypes[0]
}

func (x ESeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESeverity.Descriptor instead.
func (ESeverity) EnumDescriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{0}
}

type FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode int32

const (
	FailureExaminationRule_FailureCriteria_FailureValueCriteria_WITHIN FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode = 0
	FailureExaminationRule_FailureCriteria_FailureValueCriteria_OUTOF  FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode = 1
)

// Enum value maps for FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode.
var (
	FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode_name = map[int32]string{
		0: "WITHIN",
		1: "OUTOF",
	}
	FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode_value = map[string]int32{
		"WITHIN": 0,
		"OUTOF":  1,
	}
)

func (x FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode) Enum() *FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode {
	p := new(FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode)
	*p = x
	return p
}

func (x FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bit_proto_enumTypes[1].Descriptor()
}

func (FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode) Type() protoreflect.EnumType {
	return &file_bit_proto_enumTypes[1]
}

func (x FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode.Descriptor instead.
func (FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode) EnumDescriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

type FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType int32

const (
	FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_VALUE   FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType = 0
	FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_PERCENT FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType = 1
)

// Enum value maps for FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType.
var (
	FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType_name = map[int32]string{
		0: "VALUE",
		1: "PERCENT",
	}
	FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType_value = map[string]int32{
		"VALUE":   0,
		"PERCENT": 1,
	}
)

func (x FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType) Enum() *FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType {
	p := new(FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType)
	*p = x
	return p
}

func (x FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType) Descriptor() protoreflect.EnumDescriptor {
	return file_bit_proto_enumTypes[2].Descriptor()
}

func (FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType) Type() protoreflect.EnumType {
	return &file_bit_proto_enumTypes[2]
}

func (x FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType.Descriptor instead.
func (FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType) EnumDescriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{2, 0, 0, 0, 0}
}

type FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType int32

const (
	FailureExaminationRule_FailureCriteria_FailureTimeCriteria_NO_WINDOW FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType = 0
	FailureExaminationRule_FailureCriteria_FailureTimeCriteria_SLIDING   FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType = 1
)

// Enum value maps for FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType.
var (
	FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType_name = map[int32]string{
		0: "NO_WINDOW",
		1: "SLIDING",
	}
	FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType_value = map[string]int32{
		"NO_WINDOW": 0,
		"SLIDING":   1,
	}
)

func (x FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType) Enum() *FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType {
	p := new(FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType)
	*p = x
	return p
}

func (x FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType) Descriptor() protoreflect.EnumDescriptor {
	return file_bit_proto_enumTypes[3].Descriptor()
}

func (FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType) Type() protoreflect.EnumType {
	return &file_bit_proto_enumTypes[3]
}

func (x FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType.Descriptor instead.
func (FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType) EnumDescriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{2, 0, 1, 0}
}

type FailureReportDuration_EIndicationLatchType int32

const (
	FailureReportDuration_NO_LATCH          FailureReportDuration_EIndicationLatchType = 0 // indication is down when the test succedes
	FailureReportDuration_LATCH_UNTIL_RESET FailureReportDuration_EIndicationLatchType = 1 // indication is down until implicit request (enable delay until reported to someone)
	FailureReportDuration_LATCH_FOREVER     FailureReportDuration_EIndicationLatchType = 2
	FailureReportDuration_NUM_OF_SECONDS    FailureReportDuration_EIndicationLatchType = 3
)

// Enum value maps for FailureReportDuration_EIndicationLatchType.
var (
	FailureReportDuration_EIndicationLatchType_name = map[int32]string{
		0: "NO_LATCH",
		1: "LATCH_UNTIL_RESET",
		2: "LATCH_FOREVER",
		3: "NUM_OF_SECONDS",
	}
	FailureReportDuration_EIndicationLatchType_value = map[string]int32{
		"NO_LATCH":          0,
		"LATCH_UNTIL_RESET": 1,
		"LATCH_FOREVER":     2,
		"NUM_OF_SECONDS":    3,
	}
)

func (x FailureReportDuration_EIndicationLatchType) Enum() *FailureReportDuration_EIndicationLatchType {
	p := new(FailureReportDuration_EIndicationLatchType)
	*p = x
	return p
}

func (x FailureReportDuration_EIndicationLatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureReportDuration_EIndicationLatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_bit_proto_enumTypes[4].Descriptor()
}

func (FailureReportDuration_EIndicationLatchType) Type() protoreflect.EnumType {
	return &file_bit_proto_enumTypes[4]
}

func (x FailureReportDuration_EIndicationLatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureReportDuration_EIndicationLatchType.Descriptor instead.
func (FailureReportDuration_EIndicationLatchType) EnumDescriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{3, 0}
}

///////////////////////////////////////////////////////////////////////////////
// General structures
///////////////////////////////////////////////////////////////////////////////
type KeyValuePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base64 encoded value
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// base64 encoded value
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValuePair) Reset() {
	*x = KeyValuePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValuePair) ProtoMessage() {}

func (x *KeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValuePair.ProtoReflect.Descriptor instead.
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{0}
}

func (x *KeyValuePair) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyValuePair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

//---- general failure description ------
type FailureDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitName        string    `protobuf:"bytes,1,opt,name=unit_name,json=unitName,proto3" json:"unit_name,omitempty"`                   // Unit name that performs the test
	TestName        string    `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`                   // Test Name
	TestId          uint64    `protobuf:"varint,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`                        // Test ID, must be unique in the system
	BitType         []string  `protobuf:"bytes,4,rep,name=bit_type,json=bitType,proto3" json:"bit_type,omitempty"`                      // Type of BIT, e.g. PBIT, IBIT, CBIT, FBIT etc
	Description     string    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                             // Test procedure description for presentation
	AdditionalInfo  string    `protobuf:"bytes,6,opt,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"` // Test additional information
	Purpose         string    `protobuf:"bytes,7,opt,name=purpose,proto3" json:"purpose,omitempty"`                                     // Test purpose
	Severity        ESeverity `protobuf:"varint,8,opt,name=severity,proto3,enum=bit.ESeverity" json:"severity,omitempty"`
	OperatorFailure []string  `protobuf:"bytes,10,rep,name=operator_failure,json=operatorFailure,proto3" json:"operator_failure,omitempty"` // describes system functionalities from oprarators
	// point of view that are influenced
	// (what I cannot do in the system)
	// in case of failure. e.g. TargetDetection
	LineReplacentUnits   []string `protobuf:"bytes,11,rep,name=line_replacent_units,json=lineReplacentUnits,proto3" json:"line_replacent_units,omitempty"`       // Line replacement units, in the order of replacement
	FieldReplacemntUnits []string `protobuf:"bytes,12,rep,name=field_replacemnt_units,json=fieldReplacemntUnits,proto3" json:"field_replacemnt_units,omitempty"` // Field replacement units, in the order of replacement
}

func (x *FailureDescription) Reset() {
	*x = FailureDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureDescription) ProtoMessage() {}

func (x *FailureDescription) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureDescription.ProtoReflect.Descriptor instead.
func (*FailureDescription) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{1}
}

func (x *FailureDescription) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *FailureDescription) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *FailureDescription) GetTestId() uint64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *FailureDescription) GetBitType() []string {
	if x != nil {
		return x.BitType
	}
	return nil
}

func (x *FailureDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FailureDescription) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

func (x *FailureDescription) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *FailureDescription) GetSeverity() ESeverity {
	if x != nil {
		return x.Severity
	}
	return ESeverity_MINOR
}

func (x *FailureDescription) GetOperatorFailure() []string {
	if x != nil {
		return x.OperatorFailure
	}
	return nil
}

func (x *FailureDescription) GetLineReplacentUnits() []string {
	if x != nil {
		return x.LineReplacentUnits
	}
	return nil
}

func (x *FailureDescription) GetFieldReplacemntUnits() []string {
	if x != nil {
		return x.FieldReplacemntUnits
	}
	return nil
}

//---- failure examination rule ------
type FailureExaminationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchingField   string                                  `protobuf:"bytes,1,opt,name=matching_field,json=matchingField,proto3" json:"matching_field,omitempty"`       // The field that should be evaluated for failure rport
	MatchingTag     *KeyValuePair                           `protobuf:"bytes,2,opt,name=matching_tag,json=matchingTag,proto3" json:"matching_tag,omitempty"`             // The tag that should be present
	FailureCriteria *FailureExaminationRule_FailureCriteria `protobuf:"bytes,3,opt,name=failure_criteria,json=failureCriteria,proto3" json:"failure_criteria,omitempty"` // crioterions
}

func (x *FailureExaminationRule) Reset() {
	*x = FailureExaminationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureExaminationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureExaminationRule) ProtoMessage() {}

func (x *FailureExaminationRule) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureExaminationRule.ProtoReflect.Descriptor instead.
func (*FailureExaminationRule) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{2}
}

func (x *FailureExaminationRule) GetMatchingField() string {
	if x != nil {
		return x.MatchingField
	}
	return ""
}

func (x *FailureExaminationRule) GetMatchingTag() *KeyValuePair {
	if x != nil {
		return x.MatchingTag
	}
	return nil
}

func (x *FailureExaminationRule) GetFailureCriteria() *FailureExaminationRule_FailureCriteria {
	if x != nil {
		return x.FailureCriteria
	}
	return nil
}

//---- failure report duration ------
type FailureReportDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indication        FailureReportDuration_EIndicationLatchType `protobuf:"varint,1,opt,name=indication,proto3,enum=bit.FailureReportDuration_EIndicationLatchType" json:"indication,omitempty"`
	IndicationSeconds uint32                                     `protobuf:"varint,2,opt,name=indication_seconds,json=indicationSeconds,proto3" json:"indication_seconds,omitempty"` // relevant only if indication=NUM_OF_SECONDS
}

func (x *FailureReportDuration) Reset() {
	*x = FailureReportDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureReportDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureReportDuration) ProtoMessage() {}

func (x *FailureReportDuration) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureReportDuration.ProtoReflect.Descriptor instead.
func (*FailureReportDuration) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{3}
}

func (x *FailureReportDuration) GetIndication() FailureReportDuration_EIndicationLatchType {
	if x != nil {
		return x.Indication
	}
	return FailureReportDuration_NO_LATCH
}

func (x *FailureReportDuration) GetIndicationSeconds() uint32 {
	if x != nil {
		return x.IndicationSeconds
	}
	return 0
}

// Result of test, it is inspired by Time-Series event i.e.
//   <id>[<tag-key>=<tag-value>, ...][<field-key>=<field-value>, ...]<timestamp>
type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId         uint64                 `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`                         // Test ID, must be unique in the system
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                  //  when the test was performed
	TagSet         []*KeyValuePair        `protobuf:"bytes,3,rep,name=tag_set,json=tagSet,proto3" json:"tag_set,omitempty"`                          // set of Tags, e.g.: hostname=server02, ip=10.1.1.1, zone=north, etc.
	FieldSet       []*KeyValuePair        `protobuf:"bytes,4,rep,name=field_set,json=fieldSet,proto3" json:"field_set,omitempty"`                    // set of Fields, e.g.: temperature=24.5, volts=7.1, etc.
	ReportPriority uint32                 `protobuf:"varint,5,opt,name=report_priority,json=reportPriority,proto3" json:"report_priority,omitempty"` // The report priority [0 - lowest]
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{4}
}

func (x *TestResult) GetTestId() uint64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *TestResult) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TestResult) GetTagSet() []*KeyValuePair {
	if x != nil {
		return x.TagSet
	}
	return nil
}

func (x *TestResult) GetFieldSet() []*KeyValuePair {
	if x != nil {
		return x.FieldSet
	}
	return nil
}

func (x *TestResult) GetReportPriority() uint32 {
	if x != nil {
		return x.ReportPriority
	}
	return 0
}

type PrimaryHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// consecutive message counter that is increased upon every transmission
	MessageCounter uint64 `protobuf:"varint,1,opt,name=messageCounter,proto3" json:"messageCounter,omitempty"`
	// when the status was determined
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// the version of the schema
	SchemaVersion string `protobuf:"bytes,3,opt,name=schemaVersion,proto3" json:"schemaVersion,omitempty"`
	// the identification of the sender, encoded with base64
	SenderHost string `protobuf:"bytes,4,opt,name=senderHost,proto3" json:"senderHost,omitempty"`
}

func (x *PrimaryHeader) Reset() {
	*x = PrimaryHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryHeader) ProtoMessage() {}

func (x *PrimaryHeader) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryHeader.ProtoReflect.Descriptor instead.
func (*PrimaryHeader) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{5}
}

func (x *PrimaryHeader) GetMessageCounter() uint64 {
	if x != nil {
		return x.MessageCounter
	}
	return 0
}

func (x *PrimaryHeader) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PrimaryHeader) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *PrimaryHeader) GetSenderHost() string {
	if x != nil {
		return x.SenderHost
	}
	return ""
}

//****************************************************************************
type TestResultsSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// header
	Header *PrimaryHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// data
	ResultsSet []*TestResult `protobuf:"bytes,2,rep,name=results_set,json=resultsSet,proto3" json:"results_set,omitempty"`
}

func (x *TestResultsSet) Reset() {
	*x = TestResultsSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResultsSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResultsSet) ProtoMessage() {}

func (x *TestResultsSet) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResultsSet.ProtoReflect.Descriptor instead.
func (*TestResultsSet) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{6}
}

func (x *TestResultsSet) GetHeader() *PrimaryHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TestResultsSet) GetResultsSet() []*TestResult {
	if x != nil {
		return x.ResultsSet
	}
	return nil
}

// This structure describes failure.
type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description     *FailureDescription          `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	ExaminationRule *FailureExaminationRule      `protobuf:"bytes,2,opt,name=examination_rule,json=examinationRule,proto3" json:"examination_rule,omitempty"`
	ReportDuration  *FailureReportDuration       `protobuf:"bytes,3,opt,name=report_duration,json=reportDuration,proto3" json:"report_duration,omitempty"`
	Dependencies    *Failure_FailureDependencies `protobuf:"bytes,4,opt,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{7}
}

func (x *Failure) GetDescription() *FailureDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Failure) GetExaminationRule() *FailureExaminationRule {
	if x != nil {
		return x.ExaminationRule
	}
	return nil
}

func (x *Failure) GetReportDuration() *FailureReportDuration {
	if x != nil {
		return x.ReportDuration
	}
	return nil
}

func (x *Failure) GetDependencies() *Failure_FailureDependencies {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

// This structure configures all falures that should not be reported for defined user groups
type UserGroupsFiltering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupFilter []*UserGroupsFiltering_FilteredFailures `protobuf:"bytes,1,rep,name=group_filter,json=groupFilter,proto3" json:"group_filter,omitempty"`
}

func (x *UserGroupsFiltering) Reset() {
	*x = UserGroupsFiltering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGroupsFiltering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroupsFiltering) ProtoMessage() {}

func (x *UserGroupsFiltering) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroupsFiltering.ProtoReflect.Descriptor instead.
func (*UserGroupsFiltering) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{8}
}

func (x *UserGroupsFiltering) GetGroupFilter() []*UserGroupsFiltering_FilteredFailures {
	if x != nil {
		return x.GroupFilter
	}
	return nil
}

// This structure contains data that is reported as BIT Status
type BitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGroup string                      `protobuf:"bytes,1,opt,name=user_group,json=userGroup,proto3" json:"user_group,omitempty"`
	Failures  []*BitStatus_RportedFailure `protobuf:"bytes,2,rep,name=failures,proto3" json:"failures,omitempty"`
}

func (x *BitStatus) Reset() {
	*x = BitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitStatus) ProtoMessage() {}

func (x *BitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitStatus.ProtoReflect.Descriptor instead.
func (*BitStatus) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{9}
}

func (x *BitStatus) GetUserGroup() string {
	if x != nil {
		return x.UserGroup
	}
	return ""
}

func (x *BitStatus) GetFailures() []*BitStatus_RportedFailure {
	if x != nil {
		return x.Failures
	}
	return nil
}

type FailureExaminationRule_FailureCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueCriteria *FailureExaminationRule_FailureCriteria_FailureValueCriteria `protobuf:"bytes,1,opt,name=value_criteria,json=valueCriteria,proto3" json:"value_criteria,omitempty"`
	TimeCriteria  *FailureExaminationRule_FailureCriteria_FailureTimeCriteria  `protobuf:"bytes,2,opt,name=time_criteria,json=timeCriteria,proto3" json:"time_criteria,omitempty"`
}

func (x *FailureExaminationRule_FailureCriteria) Reset() {
	*x = FailureExaminationRule_FailureCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureExaminationRule_FailureCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureExaminationRule_FailureCriteria) ProtoMessage() {}

func (x *FailureExaminationRule_FailureCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureExaminationRule_FailureCriteria.ProtoReflect.Descriptor instead.
func (*FailureExaminationRule_FailureCriteria) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FailureExaminationRule_FailureCriteria) GetValueCriteria() *FailureExaminationRule_FailureCriteria_FailureValueCriteria {
	if x != nil {
		return x.ValueCriteria
	}
	return nil
}

func (x *FailureExaminationRule_FailureCriteria) GetTimeCriteria() *FailureExaminationRule_FailureCriteria_FailureTimeCriteria {
	if x != nil {
		return x.TimeCriteria
	}
	return nil
}

// Value based definition for failure anouncment
type FailureExaminationRule_FailureCriteria_FailureValueCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum       float64                                                                    `protobuf:"fixed64,1,opt,name=minimum,proto3" json:"minimum,omitempty"`                                                                                                                     // minimum value
	Miximum       float64                                                                    `protobuf:"fixed64,2,opt,name=miximum,proto3" json:"miximum,omitempty"`                                                                                                                     // maximum value
	ThresholdMode FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode `protobuf:"varint,3,opt,name=threshold_mode,json=thresholdMode,proto3,enum=bit.FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode" json:"threshold_mode,omitempty"` // in/out range
	Exceeding     *FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding     `protobuf:"bytes,4,opt,name=exceeding,proto3" json:"exceeding,omitempty"`                                                                                                                   //  exceeding limit
}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria) Reset() {
	*x = FailureExaminationRule_FailureCriteria_FailureValueCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureExaminationRule_FailureCriteria_FailureValueCriteria) ProtoMessage() {}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureExaminationRule_FailureCriteria_FailureValueCriteria.ProtoReflect.Descriptor instead.
func (*FailureExaminationRule_FailureCriteria_FailureValueCriteria) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria) GetMiximum() float64 {
	if x != nil {
		return x.Miximum
	}
	return 0
}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria) GetThresholdMode() FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode {
	if x != nil {
		return x.ThresholdMode
	}
	return FailureExaminationRule_FailureCriteria_FailureValueCriteria_WITHIN
}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria) GetExceeding() *FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding {
	if x != nil {
		return x.Exceeding
	}
	return nil
}

// Time based definition for failure anouncment
type FailureExaminationRule_FailureCriteria_FailureTimeCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowType     FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType `protobuf:"varint,1,opt,name=window_type,json=windowType,proto3,enum=bit.FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType" json:"window_type,omitempty"`
	WindowSize     uint32                                                                 `protobuf:"varint,2,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	FailuresCCount uint32                                                                 `protobuf:"varint,3,opt,name=failures_cCount,json=failuresCCount,proto3" json:"failures_cCount,omitempty"`
}

func (x *FailureExaminationRule_FailureCriteria_FailureTimeCriteria) Reset() {
	*x = FailureExaminationRule_FailureCriteria_FailureTimeCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureExaminationRule_FailureCriteria_FailureTimeCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureExaminationRule_FailureCriteria_FailureTimeCriteria) ProtoMessage() {}

func (x *FailureExaminationRule_FailureCriteria_FailureTimeCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureExaminationRule_FailureCriteria_FailureTimeCriteria.ProtoReflect.Descriptor instead.
func (*FailureExaminationRule_FailureCriteria_FailureTimeCriteria) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{2, 0, 1}
}

func (x *FailureExaminationRule_FailureCriteria_FailureTimeCriteria) GetWindowType() FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType {
	if x != nil {
		return x.WindowType
	}
	return FailureExaminationRule_FailureCriteria_FailureTimeCriteria_NO_WINDOW
}

func (x *FailureExaminationRule_FailureCriteria_FailureTimeCriteria) GetWindowSize() uint32 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

func (x *FailureExaminationRule_FailureCriteria_FailureTimeCriteria) GetFailuresCCount() uint32 {
	if x != nil {
		return x.FailuresCCount
	}
	return 0
}

type FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType `protobuf:"varint,1,opt,name=type,proto3,enum=bit.FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType" json:"type,omitempty"`
	Value float64                                                                              `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding) Reset() {
	*x = FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding) ProtoMessage() {}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding.ProtoReflect.Descriptor instead.
func (*FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding) GetType() FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType {
	if x != nil {
		return x.Type
	}
	return FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_VALUE
}

func (x *FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// ----- dependencies ------
type Failure_FailureDependencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BelongsToGroup  []string `protobuf:"bytes,1,rep,name=belongs_to_group,json=belongsToGroup,proto3" json:"belongs_to_group,omitempty"`    // groups that this failure belongs to
	MasksOtherGroup []string `protobuf:"bytes,2,rep,name=masks_other_group,json=masksOtherGroup,proto3" json:"masks_other_group,omitempty"` // groups that this failure suppress
}

func (x *Failure_FailureDependencies) Reset() {
	*x = Failure_FailureDependencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure_FailureDependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure_FailureDependencies) ProtoMessage() {}

func (x *Failure_FailureDependencies) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure_FailureDependencies.ProtoReflect.Descriptor instead.
func (*Failure_FailureDependencies) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Failure_FailureDependencies) GetBelongsToGroup() []string {
	if x != nil {
		return x.BelongsToGroup
	}
	return nil
}

func (x *Failure_FailureDependencies) GetMasksOtherGroup() []string {
	if x != nil {
		return x.MasksOtherGroup
	}
	return nil
}

type UserGroupsFiltering_FilteredFailures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGroup     string   `protobuf:"bytes,1,opt,name=user_group,json=userGroup,proto3" json:"user_group,omitempty"`
	MaskedTestIds []uint64 `protobuf:"varint,2,rep,packed,name=masked_test_ids,json=maskedTestIds,proto3" json:"masked_test_ids,omitempty"` // Test ID, that is masked for specific user group
}

func (x *UserGroupsFiltering_FilteredFailures) Reset() {
	*x = UserGroupsFiltering_FilteredFailures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGroupsFiltering_FilteredFailures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGroupsFiltering_FilteredFailures) ProtoMessage() {}

func (x *UserGroupsFiltering_FilteredFailures) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGroupsFiltering_FilteredFailures.ProtoReflect.Descriptor instead.
func (*UserGroupsFiltering_FilteredFailures) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UserGroupsFiltering_FilteredFailures) GetUserGroup() string {
	if x != nil {
		return x.UserGroup
	}
	return ""
}

func (x *UserGroupsFiltering_FilteredFailures) GetMaskedTestIds() []uint64 {
	if x != nil {
		return x.MaskedTestIds
	}
	return nil
}

type BitStatus_RportedFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureData *FailureDescription    `protobuf:"bytes,1,opt,name=failure_data,json=failureData,proto3" json:"failure_data,omitempty"` // the failure description
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                        // when the status was determined
	Count       uint64                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BitStatus_RportedFailure) Reset() {
	*x = BitStatus_RportedFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitStatus_RportedFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitStatus_RportedFailure) ProtoMessage() {}

func (x *BitStatus_RportedFailure) ProtoReflect() protoreflect.Message {
	mi := &file_bit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitStatus_RportedFailure.ProtoReflect.Descriptor instead.
func (*BitStatus_RportedFailure) Descriptor() ([]byte, []int) {
	return file_bit_proto_rawDescGZIP(), []int{9, 0}
}

func (x *BitStatus_RportedFailure) GetFailureData() *FailureDescription {
	if x != nil {
		return x.FailureData
	}
	return nil
}

func (x *BitStatus_RportedFailure) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BitStatus_RportedFailure) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_bit_proto protoreflect.FileDescriptor

var file_bit_proto_rawDesc = []byte{
	0x0a, 0x09, 0x62, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x62, 0x69, 0x74,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x36, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa6, 0x03, 0x0a, 0x12, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x45, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x6e, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x22, 0xc0, 0x09, 0x0a, 0x16, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x74,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x12, 0x56, 0x0a, 0x10, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x1a, 0xf0, 0x07, 0x0a, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x67, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12,
	0x64, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x1a, 0x92, 0x04, 0x0a, 0x14, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x12, 0x76, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x62, 0x69, 0x74,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x45, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x68, 0x0a, 0x09, 0x65, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x62, 0x69, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x1a, 0xba, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x59, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x45, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x45, 0x45, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x22, 0x27, 0x0a, 0x0e, 0x45, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x55, 0x54, 0x4f, 0x46, 0x10, 0x01, 0x1a, 0xf8, 0x01, 0x0a, 0x13, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x12, 0x6c, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x45, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x43, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x0b, 0x45, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4c, 0x49, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4f, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x62, 0x0a, 0x14, 0x45, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x4c, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x55,
	0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x53, 0x10, 0x03, 0x22, 0xe4, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x06, 0x74, 0x61, 0x67, 0x53, 0x65,
	0x74, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x48, 0x6f, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x53, 0x65, 0x74, 0x22, 0x84, 0x03, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x65,
	0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x69, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x69, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x6b,
	0x0a, 0x13, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x6b,
	0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xbe, 0x01, 0x0a, 0x13,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x69, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x59, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x6d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x84, 0x02, 0x0a,
	0x09, 0x42, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x69,
	0x74, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x1a, 0x9c, 0x01, 0x0a, 0x0e, 0x52, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x69, 0x74, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2a, 0x3e, 0x0a, 0x09, 0x45, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x41, 0x46, 0x45, 0x54,
	0x59, 0x10, 0x03, 0x42, 0x45, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x66, 0x61, 0x65,
	0x6c, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x2e, 0x62, 0x69, 0x74, 0x42, 0x03, 0x42, 0x69, 0x74, 0x48,
	0x01, 0x50, 0x01, 0x5a, 0x13, 0x72, 0x61, 0x66, 0x61, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x69, 0x6e, 0x61, 0x2f, 0x62, 0x69, 0x74, 0xaa, 0x02, 0x0f, 0x52, 0x61, 0x66, 0x61, 0x65,
	0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x2e, 0x42, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bit_proto_rawDescOnce sync.Once
	file_bit_proto_rawDescData = file_bit_proto_rawDesc
)

func file_bit_proto_rawDescGZIP() []byte {
	file_bit_proto_rawDescOnce.Do(func() {
		file_bit_proto_rawDescData = protoimpl.X.CompressGZIP(file_bit_proto_rawDescData)
	})
	return file_bit_proto_rawDescData
}

var file_bit_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_bit_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_bit_proto_goTypes = []interface{}{
	(ESeverity)(0), // 0: bit.ESeverity
	(FailureExaminationRule_FailureCriteria_FailureValueCriteria_EThresholdMode)(0),           // 1: bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria.EThresholdMode
	(FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding_EExceedingType)(0), // 2: bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria.Exceeding.EExceedingType
	(FailureExaminationRule_FailureCriteria_FailureTimeCriteria_EWindowType)(0),               // 3: bit.FailureExaminationRule.FailureCriteria.FailureTimeCriteria.EWindowType
	(FailureReportDuration_EIndicationLatchType)(0),                                           // 4: bit.FailureReportDuration.EIndicationLatchType
	(*KeyValuePair)(nil),                           // 5: bit.KeyValuePair
	(*FailureDescription)(nil),                     // 6: bit.FailureDescription
	(*FailureExaminationRule)(nil),                 // 7: bit.FailureExaminationRule
	(*FailureReportDuration)(nil),                  // 8: bit.FailureReportDuration
	(*TestResult)(nil),                             // 9: bit.TestResult
	(*PrimaryHeader)(nil),                          // 10: bit.PrimaryHeader
	(*TestResultsSet)(nil),                         // 11: bit.TestResultsSet
	(*Failure)(nil),                                // 12: bit.Failure
	(*UserGroupsFiltering)(nil),                    // 13: bit.UserGroupsFiltering
	(*BitStatus)(nil),                              // 14: bit.BitStatus
	(*FailureExaminationRule_FailureCriteria)(nil), // 15: bit.FailureExaminationRule.FailureCriteria
	(*FailureExaminationRule_FailureCriteria_FailureValueCriteria)(nil),           // 16: bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria
	(*FailureExaminationRule_FailureCriteria_FailureTimeCriteria)(nil),            // 17: bit.FailureExaminationRule.FailureCriteria.FailureTimeCriteria
	(*FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding)(nil), // 18: bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria.Exceeding
	(*Failure_FailureDependencies)(nil),                                           // 19: bit.Failure.FailureDependencies
	(*UserGroupsFiltering_FilteredFailures)(nil),                                  // 20: bit.UserGroupsFiltering.FilteredFailures
	(*BitStatus_RportedFailure)(nil),                                              // 21: bit.BitStatus.RportedFailure
	(*timestamppb.Timestamp)(nil),                                                 // 22: google.protobuf.Timestamp
}
var file_bit_proto_depIdxs = []int32{
	0,  // 0: bit.FailureDescription.severity:type_name -> bit.ESeverity
	5,  // 1: bit.FailureExaminationRule.matching_tag:type_name -> bit.KeyValuePair
	15, // 2: bit.FailureExaminationRule.failure_criteria:type_name -> bit.FailureExaminationRule.FailureCriteria
	4,  // 3: bit.FailureReportDuration.indication:type_name -> bit.FailureReportDuration.EIndicationLatchType
	22, // 4: bit.TestResult.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 5: bit.TestResult.tag_set:type_name -> bit.KeyValuePair
	5,  // 6: bit.TestResult.field_set:type_name -> bit.KeyValuePair
	22, // 7: bit.PrimaryHeader.timestamp:type_name -> google.protobuf.Timestamp
	10, // 8: bit.TestResultsSet.header:type_name -> bit.PrimaryHeader
	9,  // 9: bit.TestResultsSet.results_set:type_name -> bit.TestResult
	6,  // 10: bit.Failure.description:type_name -> bit.FailureDescription
	7,  // 11: bit.Failure.examination_rule:type_name -> bit.FailureExaminationRule
	8,  // 12: bit.Failure.report_duration:type_name -> bit.FailureReportDuration
	19, // 13: bit.Failure.dependencies:type_name -> bit.Failure.FailureDependencies
	20, // 14: bit.UserGroupsFiltering.group_filter:type_name -> bit.UserGroupsFiltering.FilteredFailures
	21, // 15: bit.BitStatus.failures:type_name -> bit.BitStatus.RportedFailure
	16, // 16: bit.FailureExaminationRule.FailureCriteria.value_criteria:type_name -> bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria
	17, // 17: bit.FailureExaminationRule.FailureCriteria.time_criteria:type_name -> bit.FailureExaminationRule.FailureCriteria.FailureTimeCriteria
	1,  // 18: bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria.threshold_mode:type_name -> bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria.EThresholdMode
	18, // 19: bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria.exceeding:type_name -> bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria.Exceeding
	3,  // 20: bit.FailureExaminationRule.FailureCriteria.FailureTimeCriteria.window_type:type_name -> bit.FailureExaminationRule.FailureCriteria.FailureTimeCriteria.EWindowType
	2,  // 21: bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria.Exceeding.type:type_name -> bit.FailureExaminationRule.FailureCriteria.FailureValueCriteria.Exceeding.EExceedingType
	6,  // 22: bit.BitStatus.RportedFailure.failure_data:type_name -> bit.FailureDescription
	22, // 23: bit.BitStatus.RportedFailure.timestamp:type_name -> google.protobuf.Timestamp
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_bit_proto_init() }
func file_bit_proto_init() {
	if File_bit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValuePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureExaminationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureReportDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResultsSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGroupsFiltering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureExaminationRule_FailureCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureExaminationRule_FailureCriteria_FailureValueCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureExaminationRule_FailureCriteria_FailureTimeCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureExaminationRule_FailureCriteria_FailureValueCriteria_Exceeding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure_FailureDependencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGroupsFiltering_FilteredFailures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitStatus_RportedFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bit_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bit_proto_goTypes,
		DependencyIndexes: file_bit_proto_depIdxs,
		EnumInfos:         file_bit_proto_enumTypes,
		MessageInfos:      file_bit_proto_msgTypes,
	}.Build()
	File_bit_proto = out.File
	file_bit_proto_rawDesc = nil
	file_bit_proto_goTypes = nil
	file_bit_proto_depIdxs = nil
}
