/*
 * bit-test-results-exporter
 *
 * This protocol defines the API for **test-results-exporter** service in the **BIT** functionality.
 *
 * API version: 1.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/go-playground/validator"
	"io/ioutil"
	"log"
	"net/http"
	"os"
)

func indexerMockPostReport(request ReportBody) ApiResponse {
	reportFile := ReportBody{}
	//f, err := os.OpenFile("notes.txt", os.O_RDWR|os.O_CREATE, 0755)

	content, err := ioutil.ReadFile("storage/testReport.json")
	if err != nil {
		if errors.Is(err, os.ErrNotExist) {
			input, e := json.MarshalIndent(request, "", " ")
			if e != nil {
				return ApiResponse{Code: 404, Message: "Internal server error"}
			}
			e = ioutil.WriteFile("storage/testReport.json", input, 0644)
			if e != nil {
				return ApiResponse{Code: 404, Message: "Internal server error"}
			}
			return ApiResponse{Code: 200, Message: "Report posted!"}
		}
		return ApiResponse{Code: 404, Message: "Corrupt file"}
	}
	// converting existing data to ReportBody type
	err = json.Unmarshal(content, &reportFile)
	if err != nil || !validateType(reportFile) {
		return ApiResponse{Code: 404, Message: "Internal server error"}
	}
	// append new report
	reportFile.Reports = append(reportFile.Reports, request.Reports...)
	// Marshal it and write back to file
	input, err := json.MarshalIndent(reportFile, "", " ")
	if err != nil {
		return ApiResponse{Code: 404, Message: "Internal server error"}
	}
	err = ioutil.WriteFile("storage/testReport.json", input, 0644)
	if err != nil {
		return ApiResponse{Code: 404, Message: "Internal server error"}
	}
	return ApiResponse{Code: 200, Message: "Report posted!"}
}

func writeBandwidth(request Bandwidth) ApiResponse {
	input, err := json.MarshalIndent(request, "", " ")
	if err != nil {
		return ApiResponse{Code: 404, Message: "Bad request"}
	}
	err = ioutil.WriteFile("storage/test.json", input, 0644)
	if err != nil {
		log.Println(err)
		return ApiResponse{Code: 404, Message: "Corrupt file"}
	}
	return ApiResponse{Code: 200, Message: "Bandwidth updated!"}
}

func readBandwidth() ApiResponse {
	content, err := ioutil.ReadFile("storage/test.json")
	if err != nil {
		return ApiResponse{Code: 404, Message: "Corrupt file"}
	}
	return ApiResponse{Code: 200, Message: string(content)}
}

func validateType(response interface{}) bool {
	v := validator.New()
	err := v.Struct(response)
	if err != nil {
		for _, e := range err.(validator.ValidationErrors) {
			fmt.Println(e.Error())
		}
		return false
	}
	return true
}

func GetBandwidth(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	dataFromIndexer := readBandwidth()
	if dataFromIndexer.Code != 200 {
		w.WriteHeader(http.StatusNotFound)
		err := json.NewEncoder(w).Encode(&dataFromIndexer)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		}
		return
	}
	response := Bandwidth{}
	err := json.Unmarshal([]byte(dataFromIndexer.Message), &response)

	// validate that data from indexer is ok
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		err = json.NewEncoder(w).Encode(&dataFromIndexer)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		}
		return
	}

	// validate that data from the indexer is of type Bandwidth
	if !validateType(response) {
		w.WriteHeader(http.StatusNotFound)
		err = json.NewEncoder(w).Encode(ApiResponse{Code: 404, Message: "Error reading file"})
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			log.Fatalln(err)
		}
		return
	}

	// return Bandwidth response to the user
	err = json.NewEncoder(w).Encode(&response)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Fatalln(err)
	}
	w.WriteHeader(http.StatusOK)
}

func PostBandwidth(w http.ResponseWriter, r *http.Request) {
	var request Bandwidth
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	err := json.NewDecoder(r.Body).Decode(&request)

	// validate that data from the user is of type Bandwidth
	if err != nil || !validateType(request) {
		badRequest := ApiResponse{Code: 404, Message: "Bad request"}
		w.WriteHeader(http.StatusBadRequest)
		err = json.NewEncoder(w).Encode(&badRequest)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			log.Fatalln(err)
		}
		return
	}

	// return ApiResponse response to the user
	err = json.NewEncoder(w).Encode(writeBandwidth(request))
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Fatalln(err)
	}
	w.WriteHeader(http.StatusOK)
}

func PostReport(w http.ResponseWriter, r *http.Request) {
	var request ReportBody
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	err := json.NewDecoder(r.Body).Decode(&request)

	// validate that data from the user is of type Bandwidth
	if err != nil || !validateType(request) {
		fmt.Println(err)
		badRequest := ApiResponse{Code: 404, Message: "Bad request"}
		w.WriteHeader(http.StatusBadRequest)
		err = json.NewEncoder(w).Encode(&badRequest)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			log.Fatalln(err)
		}
		return
	}

	// return ApiResponse response to the user
	err = json.NewEncoder(w).Encode(indexerMockPostReport(request))
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Fatalln(err)
	}
	w.WriteHeader(http.StatusOK)
}
