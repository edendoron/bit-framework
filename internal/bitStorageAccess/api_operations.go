/*
 * bit-storage-access
 *
 * This protocol defines the API for **storage-access** service in the **BIT** functionality.
 *
 * API version: 1.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package bitStorageAccess

import (
	. "../../configs/rafael.com/bina/bit"
	. "../apiResponseHandlers"
	. "../models"
	"encoding/json"
	"fmt"
	"github.com/golang/protobuf/proto"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
)

func GetDataRead(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	timestamps := r.URL.Query()["key"]

	fmt.Println(timestamps[0])

	var reports []TestResult
	err := filepath.Walk("../storage/"+ timestamps[0] + "/",
		func(path string, info os.FileInfo, err error) error {
			if !info.IsDir() {
				protoReport, err := ioutil.ReadFile(path)
				if err != nil {
					ApiResponseHandler(w, http.StatusInternalServerError, "Can't find report!", err)
				}
				temp := TestResult{}
				err = proto.Unmarshal(protoReport, &temp)
				if err != nil {
					ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
				}
				reports = append(reports, temp)
			}
			return nil
		})
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	fmt.Println("do iget here?")
	response := make([]TestReport, len(reports))
	for i, report := range reports {
		response[i] = testResultToTestReport(report)
	}
	err = json.NewEncoder(w).Encode(&response)
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	w.WriteHeader(http.StatusOK)
}

func PostDataWrite(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	requestBody := KeyValue{}
	err := json.NewDecoder(r.Body).Decode(&requestBody)
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	switch requestBody.Key {
	case "reports":
		postReports(w, &requestBody.Value)
		ApiResponseHandler(w, http.StatusOK, "Report stored!", nil)
	}
}

func PutDataRead(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	var query string
	err := json.NewDecoder(r.Body).Decode(&query)
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	var reports []TestResult
	err = filepath.Walk("../storage/"+ query + "/",
		func(path string, info os.FileInfo, err error) error {
			if !info.IsDir() {
				protoReport, err := ioutil.ReadFile(path)
				if err != nil {
					ApiResponseHandler(w, http.StatusInternalServerError, "Can't find report!", err)
				}
				temp := TestResult{}
				err = proto.Unmarshal(protoReport, &temp)
				if err != nil {
					ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
				}
				reports = append(reports, temp)
			}
			return nil
		})
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}

	response := make([]TestReport, len(reports))
	for i, report := range reports {
		response[i] = testResultToTestReport(report)
	}
	err = json.NewEncoder(w).Encode(&response)
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	w.WriteHeader(http.StatusOK)
}

func PutDataWrite(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	request := TestReport{}
	err := json.NewDecoder(r.Body).Decode(&request)
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	path := "../storage/" + fmt.Sprint(request.Timestamp.Date()) + "/" + fmt.Sprint(request.Timestamp.Hour()) +
		"/" + fmt.Sprint(request.Timestamp.Minute()) + "/" + fmt.Sprint(request.Timestamp.Second())
	if _, err = os.Stat(path + "/tests_results.txt"); os.IsNotExist(err) {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	f, err := os.OpenFile(path + "/tests_results.txt", os.O_APPEND | os.O_WRONLY, 0644)
	if err != nil{
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	requestToProto := testReportToTestResult(request)
	protoReports, err := proto.Marshal(&requestToProto)
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	if _, err = f.Write(protoReports); err != nil{
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	ApiResponseHandler(w, http.StatusOK, "Report received!", nil)
}
