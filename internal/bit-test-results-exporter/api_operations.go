/*
 * bit-test-results-exporter
 *
 * This protocol defines the API for **test-results-exporter** service in the **BIT** functionality.
 *
 * API version: 1.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package bitTestResultsExporter

import (
	. "../apiResponseHandlers"
	. "../models"
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
)

func writeBandwidth(request Bandwidth) ApiResponse {
	input, err := json.MarshalIndent(request, "", " ")
	if err != nil {
		return ApiResponse{Code: 404, Message: "Bad request"}
	}
	err = ioutil.WriteFile("storage/test.json", input, 0644)
	if err != nil {
		log.Println(err)
		return ApiResponse{Code: 404, Message: "Corrupt file"}
	}
	return ApiResponse{Code: 200, Message: "Bandwidth updated!"}
}

func readBandwidth() ApiResponse {
	content, err := ioutil.ReadFile("storage/test.json")
	if err != nil {
		return ApiResponse{Code: 404, Message: "Corrupt file"}
	}
	return ApiResponse{Code: 200, Message: string(content)}
}

func GetBandwidth(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	dataFromIndexer := readBandwidth()
	if dataFromIndexer.Code != 200 {
		w.WriteHeader(http.StatusNotFound)
		err := json.NewEncoder(w).Encode(&dataFromIndexer)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		}
		return
	}
	response := Bandwidth{}
	err := json.Unmarshal([]byte(dataFromIndexer.Message), &response)

	// validate that data from indexer is ok
	if err != nil {
		w.WriteHeader(http.StatusNotFound)
		err = json.NewEncoder(w).Encode(&dataFromIndexer)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		}
		return
	}

	// validate that data from the indexer is of type Bandwidth
	if !ValidateType(response) {
		w.WriteHeader(http.StatusNotFound)
		err = json.NewEncoder(w).Encode(ApiResponse{Code: 404, Message: "Error reading file"})
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			log.Fatalln(err)
		}
		return
	}

	// return Bandwidth response to the user
	err = json.NewEncoder(w).Encode(&response)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Fatalln(err)
	}
	w.WriteHeader(http.StatusOK)
}

func PostBandwidth(w http.ResponseWriter, r *http.Request) {
	request := Bandwidth{}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	err := json.NewDecoder(r.Body).Decode(&request)

	// validate that data from the user is of type Bandwidth
	if err != nil || !ValidateType(request) {
		badRequest := ApiResponse{Code: 404, Message: "Bad request"}
		w.WriteHeader(http.StatusBadRequest)
		err = json.NewEncoder(w).Encode(&badRequest)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			log.Fatalln(err)
		}
		return
	}

	// return ApiResponse response to the user
	err = json.NewEncoder(w).Encode(writeBandwidth(request))
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		log.Fatalln(err)
	}
	w.WriteHeader(http.StatusOK)
}

func PostReport(w http.ResponseWriter, r *http.Request) {
	request := ReportBody{}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	badRequest := ApiResponse{Code: 404, Message: "Bad request"}
	err := json.NewDecoder(r.Body).Decode(&request)

	// validate that data from the user is of type Bandwidth
	if err != nil || !ValidateType(request) {
		ErrorHandler(w, "Internal server error", err)
	}

	// return ApiResponse response to the user
	postBody, err := json.MarshalIndent(request, "", " ")
	responseBody := bytes.NewBuffer(postBody)
	indexerRes, err := http.Post("http://localhost:8081/report/raw", "application/json; charset=UTF-8", responseBody)
	res := ApiResponse{}
	err = json.NewDecoder(indexerRes.Body).Decode(&res)
	fmt.Println(res)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		err = json.NewEncoder(w).Encode(&badRequest)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		}
		defer indexerRes.Body.Close()
		return
	}
	indexerRes.Body.Close()
	err = json.NewEncoder(w).Encode(&res)
	if err != nil {
		ErrorHandler(w, "Internal server error", err)
	}
	w.WriteHeader(http.StatusOK)
}
