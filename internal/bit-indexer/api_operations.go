/*
 * bit-indexer
 *
 * This protocol defines the API for **indexer** service in the **BIT** functionality.
 *
 * API version: 1.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package bitIndexer

import (
	. "../apiResponseHandlers"
	. "../models"
	"encoding/json"
	"errors"
	"io/ioutil"
	"net/http"
	"os"
)

func IndexerPostReport(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	reports := ReportBody{}
	request := TestReport{}
	err := json.NewDecoder(r.Body).Decode(&request)
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	content, err := ioutil.ReadFile("../storage/testReport.json")
	if err != nil {
		if !errors.Is(err, os.ErrNotExist) {
			ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
			return
		}
	} else {
		err = json.Unmarshal(content, &reports)
		if err != nil {
			ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
		}
		// converting existing data to ReportBody type
		err = ValidateType(reports)
		if err != nil {
			ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
		}
	}

	// append new reports
	reports.Reports = append(reports.Reports, request)
	// Marshal it and write back to file
	input, err := json.MarshalIndent(reports, "", " ")
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	err = ioutil.WriteFile("../storage/testReport.json", input, 0644)
	if err != nil {
		ApiResponseHandler(w, http.StatusInternalServerError, "Internal server error", err)
	}
	ApiResponseHandler(w, http.StatusOK, "Report received!", nil)
}
